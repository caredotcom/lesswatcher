#!/usr/bin/env node

/* Dependencies */
var fs = require("fs") // from core nodejs
  //, less = require("less") // https://npmjs.org/package/less
  , hound = require("hound") // https://npmjs.org/package/hound
  , execSync = require("exec-sync") // https://npmjs.org/package/exec-sync
  , argv = require("optimist").argv // https://npmjs.org/package/optimist
;

/* Configuration */
var pwd = process.cwd()
  , confLocalPath = (pwd + "/lesswatcher-conf.json")
  , conf
  , confFile
  , loadConf = (function(){
      if(argv.conf){
        confFile = argv.conf;
        if(fs.existsSync(confFile)){
          conf = require(confFile);
        } else {
          console.log("Doh! can't find custom --conf " + confFile);
          process.exit();
        }
      } else if(fs.existsSync(confLocalPath)){
        // console.log("Found custom conf in standard location " + confLocalPath);
        confFile = confLocalPath;
        conf = require(confLocalPath);
      } else {
        //console.log("Using default conf");
        confFile = "built-in defaults";
        conf = require("lesswatcher/lib/lesswatcher-conf.json");
      }
    })()
  , LESSC_COMPILER = (argv.compiler || conf.LESSC_COMPILER || "lessc") // lesswatcher-lessc
  , COMPILER_VERSION = execSync(LESSC_COMPILER + " --version")
  , LESS_DIR = (argv.less_dir || conf.LESS_DIR || (pwd + "/less"))
  , CSS_DIR = (argv.css_dir || conf.CSS_DIR || (pwd + "/css"))
  // LESSC flags:
  //, LESSC_VERBOSE = (argv.lessc_verbose || conf.LESSC_OPTS.verbose) ? "--verbose " : ""
  , LESSC_COMPRESS = (argv.lessc_compress || conf.LESSC_OPTS.compress) ? "--compress " : ""
  , LESSC_YUI = (argv.lessc_yui || conf.LESSC_OPTS.yui) ? "--yui-compress " : ""
  //, LESSC_O0 = (argv.lessc_o0 || conf.LESSC_OPTS.O0) ? " --O0" : ""
  //, LESSC_O1 = (argv.lessc_o1 || conf.LESSC_OPTS.O1) ? " --O1" : ""
  //, LESSC_O2 = (argv.lessc_o2 || conf.LESSC_OPTS.O2) ? " --O2" : ""
  //, LESSC_LINES = (argv.lessc_lines || conf.LESSC_OPTS.lines) ? " --line-numbers" : ""
  , LESSC_FLAGS = LESSC_COMPRESS + LESSC_YUI
;

/* Other vars */
var CSS_DIR_LEN = CSS_DIR.length
  , lesscList = []
  , pjson = require("lesswatcher/package.json") // to obtain version
;

var isLessFile = function (file) {
  return file.match(/\.less$/);
};

var toCssFile = function (lessFile) {
  return CSS_DIR + lessFile.replace(LESS_DIR, '').replace('less', 'css');
};

var isFileInCssDir = function (lessFile) {
  return fs.existsSync(toCssFile(lessFile));
};

// Self-explanatory
var traverseFsToFindLessFiles = function(currentPath){
  var files = fs.readdirSync(currentPath);
  for(var i in files){
    var currentFile = currentPath + "/" + files[i];
    var stats = fs.statSync(currentFile);
    if(stats.isFile()){
      if(isLessFile(currentFile)){
        var isInCssDir = isFileInCssDir(currentFile);
        watchFile(currentFile,isInCssDir);
      }
    } else if(stats.isDirectory()){
      traverseFsToFindLessFiles(currentFile);
    }
  }
};

var watchDirectoryForCreatedFiles = function (directory){
  var watcher = hound.watch(directory);
  watcher.on('create', function(file, stats) {
    if (isLessFile(file)) {
      var now = new Date();
      console.log(now.toLocaleString() + " - detected creation of \n" + file);
	  watchFile(file, isFileInCssDir(file));
      console.log("Commencing compilation of " + lesscList.length + " files..." );
      lesscList.forEach(doLessc);
      console.log("... done!\nWaiting for further .less changes...");
	}
  });
};

// watch given .less file with hound, and create event listeners
var watchFile = function(lessFile,isInCssDir){
  var watcher = hound.watch(lessFile);
  if(isInCssDir){
    lesscList.push(lessFile);
    //console.log(lessFile + " added to lesscList");
  }
  watcher.on("change", function(file, stats) {
    var now = new Date();
    console.log(now.toLocaleString() + " - detected change to \n" + file);
    console.log("Commencing compilation of " + lesscList.length + " files..." );
    lesscList.forEach(doLessc);
    console.log("... done!\nWaiting for further .less changes...");
  });
};

// Do lessc on all files in CSS_DIR
// (This "recompile everything on any change" is a little crude, but simple and effective.)
var doLessc = function(lessFile,idx,ar){
  // naming convention: foo.less => foo.css
  var cssFile = toCssFile(lessFile);
  // lessc compiler syntax: lessc foo.less foo.css --yui-compress
  var command = LESSC_COMPILER + " \"" + lessFile + "\" \"" + cssFile + "\" " + LESSC_FLAGS;
  console.log(command);
  execSyncHandlingAllErrors(command);
};

var execSyncHandlingAllErrors = function(command){
  // http://stackoverflow.com/questions/7310521/node-js-best-practice-exception-handling
  var d = require('domain').create();
  d.on('error', function(err){
    // handle the error safely
    console.log(err);
	console.log("... failed!\nWaiting for further .less changes...");
  });

  // catch the uncaught errors in this asynchronous or synchronous code block
  d.run(function(){
    // the asynchronous or synchronous code that we want to catch thrown errors on
    execSync(command);
  });
};

/* Help Message */
var printHelp = function(){
  console.log("Lesswatcher help for version: " + pjson.version);
  console.log("");
  console.log("Please also see the README: <http://npmjs.org/lesswatcher>");
  console.log("");
  console.log("usage: lesswatcher [options]");
  console.log("");
  console.log("options:");
  console.log("  -h, --help                         Print help (this message) and exit");
  console.log("  -v, --version                      Print version number and exit");
  console.log("  --compiler                         Use a different lessc compiler");
  console.log("  --conf                             Use a custom conf file");
  console.log("  --css_dir                          Override the default CSS_DIR");
  console.log("  --less_dir                         Override the default LESS_DIR");
  console.log("  --lessc_compress                   Pass '--compress' flag to lessc compiler");
  console.log("  --lessc_yui                        Pass '--yui-compress' flag to lessc compiler");
  console.log("");
  console.log("examples:");
  console.log("lesswatcher --less_dir=<any-fully-qualified-path> --css_dir=<any-fully-qualified-path>");
  console.log("            ^ CLI args like this override conf files.");
  console.log("");
  console.log("lesswatcher --conf=<any-fully-qualified-path>/lesswatcher-conf.json");
  console.log("            ^ You can specify an explicit conf file location like this...");
  console.log("              ... or simply create a valid JSON file named 'lesswatcher-conf.json' ");
  console.log("              in the same directory where you invoke lesswatcher.");
  console.log("");
  console.log("lesswatcher --compiler=lessc-1.3.1");
  console.log("            ^ You can specify an explicit lessc executable like this...");
  console.log("              ... e.g. if you have aliases for different versions.");
  //console.log("            otherwise lesswatcher provides one for you, currently: ");
  //console.log("            " + COMPILER_VERSION );
  console.log("");
  console.log("lesswatcher --lessc_yui");
  console.log("            ^ You can pass an optimization flag like --yui-compress to lessc this way");
  console.log("");
  console.log("*** Suggestion: Kill lesswatcher before performing invasive SCM operations ***");
  console.log("*** Suggestion: Use LiveReload for browser asset auto-refresh aka webdev bliss  ***");
  console.log("");
  console.log("*** IMPORTANT:  Adding new files requires restarting lesswatcher! ***");
  console.log("*** IMPORTANT:  Watch this space for lessc compilation errors; they trigger program exit! ***");
  console.log("");
  console.log("Please report bugs to cweekly@gmail.com (during beta)"); //http://github.com/caredotcom/lesswatcher.js/issues");
  console.log("");
}

/* Startup Message */
var printStartup = function(){
  console.log("LessWatcher version " + pjson.version + " activated");
  console.log("");
  console.log("  Configuration from: " + confFile);
  console.log("  LESSC_COMPILER: " + LESSC_COMPILER + " --version = \"" + COMPILER_VERSION + "\"");
  console.log("  LESS_DIR: " + LESS_DIR);
  console.log("  CSS_DIR: " + CSS_DIR);
  console.log("  LESSC_FLAGS: " + (LESSC_FLAGS || "none"));
  console.log("  (If these settings aren't right for your project, override them w/ CLI args or custom lesswatcher-conf.json)");
  console.log("");
  console.log("*** Suggestion: Kill lesswatcher before performing invasive SCM operations ***");
  console.log("*** Suggestion: Use LiveReload for browser asset auto-refresh aka webdev bliss  ***");
  console.log("");
  console.log("Happy coding! :)");
  console.log("Waiting for .less changes... \n");
};

/* Go time! */
var firedUpReadyToGo = (function(){
  if(argv.h || argv.help){
    printHelp();
    process.exit();
  } else if (argv.v || argv.version){
    console.log("This is lesswatcher version: " + pjson.version);
    process.exit();
  } else {
    printStartup();
    traverseFsToFindLessFiles(LESS_DIR);
    traverseFsToFindLessFiles(CSS_DIR);
    watchDirectoryForCreatedFiles(LESS_DIR);
    watchDirectoryForCreatedFiles(CSS_DIR);
  }
})();
